<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node2" href="$structimmer_1_1detail_1_1compatible__sentinel_3_01_t_00_01_u_00_01std_1_1enable__if__t_3_01is__i033e00f8e09a69ec5a50a3c85954f36d.html" title="immer::detail::compatible\l_sentinel\&lt; T, U, std::enable\l_if_t\&lt; is_iterator_v\&lt; T \&gt; &amp;&amp;is\l_equality_comparable_v\&lt; T, U \&gt;\l &amp;&amp;is_inequality_comparable_v\&lt;\l T, U \&gt; \&gt; \&gt;" alt="" coords="198,5,433,105"/>
<area shape="rect" id="node3" href="$structimmer_1_1detail_1_1is__dereferenceable_3_01_t_00_01void__t_3_01decltype_07_5_07std_1_1decldc20d022b5674feb4382fed555e97cf1.html" title="immer::detail::is_dereferenceable\l\&lt; T, void_t\&lt; decltype(*(std\l::declval\&lt; T &amp; \&gt;()))\&gt; \&gt;" alt="" coords="197,129,433,185"/>
<area shape="rect" id="node4" href="$structimmer_1_1detail_1_1is__equality__comparable_3_01_t_00_01_u_00_01std_1_1enable__if__t_3_01sc7e6f25e0d7450cbd0ea7ed70d3f29ef.html" title="immer::detail::is_equality\l_comparable\&lt; T, U, std::\lenable_if_t\&lt; std::is_same\l\&lt; bool, decltype(std::declval\l\&lt; T &amp; \&gt;()==std::declval\&lt; U &amp;\l \&gt;())\&gt;::value \&gt; \&gt;" alt="" coords="206,208,425,308"/>
<area shape="rect" id="node5" href="$structimmer_1_1detail_1_1is__forward__iterator_3_01_t_00_01std_1_1enable__if__t_3_01is__iterator5c7da7e4b8caf91c4be57fc7ffa2a40d.html" title="immer::detail::is_forward\l_iterator\&lt; T, std::enable\l_if_t\&lt; is_iterator_v\&lt; T \&gt;\l &amp;&amp;std::is_base_of\&lt; std::forward\l_iterator_tag, typename std::iterator\l_traits\&lt; T \&gt;::iterator_category \&gt;::value \&gt; \&gt;" alt="" coords="163,332,467,432"/>
<area shape="rect" id="node6" href="$structimmer_1_1detail_1_1is__inequality__comparable_3_01_t_00_01_u_00_01std_1_1enable__if__t_3_0d3175b6cbde7985fa3cac227fe63a4d6.html" title="immer::detail::is_inequality\l_comparable\&lt; T, U, std::enable\l_if_t\&lt; std::is_same\&lt; bool, decltype\l(std::declval\&lt; T &amp; \&gt;() !=std::declval\l\&lt; U &amp; \&gt;())\&gt;::value \&gt; \&gt;" alt="" coords="189,457,442,542"/>
<area shape="rect" id="node7" href="$structimmer_1_1detail_1_1is__iterator_3_01_t_00_01void__t_3_01std_1_1enable__if__t_3_01is__prein6dea9e3355b015bcce90c337682bb393.html" title="immer::detail::is_iterator\l\&lt; T, void_t\&lt; std::enable\l_if_t\&lt; is_preincrementable\l_v\&lt; T \&gt; &amp;&amp;is_dereferenceable\l_v\&lt; T \&gt; &amp;&amp;std::is_copy_constructible\l\&lt; T \&gt;::value &amp;&amp;std::is_copy_assignable\l\&lt; T \&gt;::value &amp;&amp;std::is_destructible\&lt;\l T \&gt;::value &amp;&amp;is_swappable_v\&lt; T \&gt; \&gt;, typename\l std::iterator_traits\&lt; T \&gt;::value_type, typename\l std::iterator_traits\&lt; T \&gt;::difference_type, typename\l std::iterator_traits\&lt; T \&gt;::reference, typename std\l::iterator_traits\&lt; T \&gt;::pointer, typename std::iterator\l_traits\&lt; T \&gt;::iterator_category \&gt; \&gt;" alt="" coords="136,566,495,769"/>
<area shape="rect" id="node8" href="$structimmer_1_1detail_1_1is__preincrementable_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__sa73ac61c0458c17d9c50b881635924578.html" title="immer::detail::is_preincrementable\l\&lt; T, std::enable_if_t\&lt; std::\lis_same\&lt; T &amp;, decltype(++(std\l::declval\&lt; T &amp; \&gt;()))\&gt;::value \&gt; \&gt;" alt="" coords="193,793,438,864"/>
<area shape="rect" id="node9" href="$structimmer_1_1detail_1_1is__subtractable_3_01_t_00_01_u_00_01void__t_3_01decltype_07std_1_1decl0ca706cdca0d8569dfa0c0fc6185d013.html" title="immer::detail::is_subtractable\l\&lt; T, U, void_t\&lt; decltype(std\l::declval\&lt; T &amp; \&gt;() &#45; std::declval\l\&lt; U &amp; \&gt;())\&gt; \&gt;" alt="" coords="205,888,426,959"/>
<area shape="rect" id="node10" href="$structimmer_1_1detail_1_1std__distance__supports_3_01_t_00_01_u_00_01void__t_3_01decltype_07std_772177665e15dec580dfc215da5c3652.html" title="immer::detail::std\l_distance_supports\&lt;\l T, U, void_t\&lt; decltype\l(std::distance(std::declval\l\&lt; T \&gt;(), std::declval\&lt; U \&gt;()))\&gt; \&gt;" alt="" coords="198,983,433,1069"/>
<area shape="rect" id="node11" href="$structimmer_1_1detail_1_1std__uninitialized__copy__supports_3_01_t_00_01_u_00_01_v_00_01void__t_df4d041842b81f84da4bc85b4ab681d3.html" title="immer::detail::std\l_uninitialized_copy\l_supports\&lt; T, U, V, void\l_t\&lt; decltype(std::uninitialized\l_copy(std::declval\&lt; T \&gt;(), std\l::declval\&lt; U \&gt;(), std::declval\l\&lt; V \&gt;()))\&gt; \&gt;" alt="" coords="210,1093,421,1207"/>
<area shape="rect" id="node12" href="$structimmer_1_1detail_1_1swappable_1_1with_3_01_t_00_01_u_00_01void__t_3_01decltype_07swap_07std579bd8a73585eedaea4fb37b88696364.html" title="immer::detail::swappable\l::with\&lt; T, U, void_t\&lt; decltype\l(swap(std::declval\&lt; T &amp; \&gt;(),\l std::declval\&lt; U &amp; \&gt;())), decltype\l(swap(std::declval\&lt; U &amp; \&gt;(), std\l::declval\&lt; T &amp; \&gt;()))\&gt; \&gt;" alt="" coords="198,1232,433,1332"/>
<area shape="rect" id="node13" href="$structis__serializable__enum_3_01_consensus_1_1_l_l_m_q_type_01_4.html" title="is_serializable_enum\l\&lt; Consensus::LLMQType \&gt;" alt="" coords="219,1356,412,1397"/>
<area shape="rect" id="node14" href="$structis__serializable__enum_3_01_pool_message_01_4.html" title="is_serializable_enum\l\&lt; PoolMessage \&gt;" alt="" coords="238,1421,393,1463"/>
<area shape="rect" id="node15" href="$structis__serializable__enum_3_01_pool_state_01_4.html" title="is_serializable_enum\l\&lt; PoolState \&gt;" alt="" coords="238,1487,393,1528"/>
<area shape="rect" id="node16" href="$structis__serializable__enum_3_01_pool_status_update_01_4.html" title="is_serializable_enum\l\&lt; PoolStatusUpdate \&gt;" alt="" coords="231,1552,399,1593"/>
<area shape="rect" id="node17" href="$structis__serializable__enum_3_01_spork_id_01_4.html" title="is_serializable_enum\l\&lt; SporkId \&gt;" alt="" coords="238,1617,393,1659"/>
</map>
